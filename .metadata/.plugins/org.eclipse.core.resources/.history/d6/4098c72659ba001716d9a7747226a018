package br.com.java.trees;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class LevelOrderTraversal {
	static void levelOrder(Node root) {
		List<Integer> fila = new ArrayList<>();
		fila.add(root.data);
		getChildrew(fila, root);
		for(Integer s : fila) { 
			  System.out.println(s.toString()); 
			}
	}

	private static void getChildrew(List<Integer> fila, Node root) {
		if (root.left!=null)
				fila.add(root.left.data);
		if (root.right!=null)
			fila.add(root.right.data);
		Node current;
		current = root.left;
		if (current != null)
			getChildrew(fila, current);
		current = root.right;
		if (current != null)
			getChildrew(fila, current);
	}

	public static Node insert(Node root, int data) {
		if (root == null) {
			return new LevelOrderTraversal().new Node(data);
		} else {
			Node cur;
			if (data <= root.data) {
				cur = insert(root.left, data);
				root.left = cur;
			} else {
				cur = insert(root.right, data);
				root.right = cur;
			}
			return root;
		}
	}

	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		Node root = null;
		while (T-- > 0) {
			int data = sc.nextInt();
			root = insert(root, data);
		}
		levelOrder(root);
	}

	class Node {
		Node left, right;
		int data;

		Node(int data) {
			this.data = data;
			left = right = null;
		}
	}
}
